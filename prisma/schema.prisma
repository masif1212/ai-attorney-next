
datasource db {
  provider = "mysql" 
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  isEmailVerified Boolean?
  phone          String
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastActiveAt   DateTime?
  isActive       Boolean   @default(true)
  chats          Chat[]
  messages       Message[]
  sessions  Session[]
  settings       Json?     
  @@index([email])
  Feedback Feedback[]
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  deviceInfo  Json     
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([token])
}

model Chat {
   id            String     @id @default(uuid())
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  endedAt       DateTime?
  status        ChatStatus @default(ACTIVE)
  user          User       @relation(fields: [userId], references: [id])
  messages      Message[]
  context       Json?    
  @@index([userId])
  @@index([status])
}

model Message {
  id            String     @id @default(uuid())
  chatId        String
  senderId      String?
  content       String     @db.Text
  createdAt     DateTime   @default(now())
  messageType   MessageType
  isSensitive   Boolean    @default(false)
  chat          Chat       @relation(fields: [chatId], references: [id])
  senderUser    User?      @relation(fields: [senderId], references: [id])
  sequence      Int      
  parentId      String?    
  senderType    String     
  pairId        String     
  @@index([chatId])
  @@index([senderId])
  @@index([messageType])
  Feedback Feedback[]
}


model Feedback {
  id            String     @id @default(uuid())
  messageId     String
  userId        String
  rating        Int       
  comments      String?
  createdAt     DateTime  @default(now())
  message       Message   @relation(fields: [messageId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@index([messageId])
  @@index([userId])
}

enum MessageType {
  QUERY     
  RESPONSE  
}

enum ChatStatus {
  ACTIVE
  ENDED
  ARCHIVED
}


